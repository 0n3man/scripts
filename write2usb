#!/bin/bash
USB="/dev/sda"
ERROR="$(ls {/dev/sdb,/dev/sdc,/dev/sdd} 2> /dev/null)"
PI_EEPROM="pieeprom-2021-01-16"
RED="\e[1;31m"
YLW="\e[1;33m"
FIN="\e[0m"

### RUN AS ROOT
run_as_root(){
if [ "$USER" != "root" ]; then
        echo "Please run this as root or with sudo privileges."
        exit 1
fi
}

correct(){
if [ -e "$USB" ]; then
    echo ""
    echo -e "${RED}$USB found${FIN}."
else 
    check_node
fi
}

confirm(){
echo -e "${YLW}If more than one USB storage device is connected"
echo -e "then select no... or risk losing important data${FIN}."
echo -e ""
read -p "Continue (y/n)?" choice
case "$choice" in 
  y|Y ) echo && echo -e "${RED}Confirmed${FIN}!";;
  n|N ) echo && echo -e "${YLW}You have chosen${FIN}... ${YLW}wisely${FIN}." && exit 0;;
  * ) echo && echo -e "${YLW}Invalid choice${FIN}." && exit 0;;
esac
}

check_progressbar(){
DPB="sudo wget -cq https://raw.githubusercontent.com/pyavitz/bash_progress_bar/master/progress_bar.sh -P /etc/opt/"
MPB="sudo mv -f /etc/opt/progress_bar.sh /etc/opt/progressbar.txt"
if ls /etc/opt/progressbar.txt > /dev/null 2>&1
	then : ;
	else $DPB && $MPB ;
fi
}

### CHECK FOR NODE
check_node(){
echo ""
echo -e "You ${RED}don't${FIN} have a ${RED}USB storage device${FIN} connected."
while [ true ] ; do
read -t 3 -n 1
if [ $? = 0 ] ; then
exit ;
else
dialog --infobox "Please connect a usb storage device" 3 40
fi
done
}

error_node(){
echo ""
echo -e "You have one to many ${RED}USB storage devices${FIN} connected."
while [ true ] ; do
read -t 3 -n 1
if [ $? = 0 ] ; then
exit ;
else
dialog --infobox "Please connect only ONE usb storage device" 3 40
fi
done
}

### EEPROM
update_eeprom(){
sed -i 's/FIRMWARE_RELEASE_STATUS="default"/FIRMWARE_RELEASE_STATUS="stable"/g' /etc/default/rpi-eeprom-update
sed -i 's/FIRMWARE_RELEASE_STATUS="critical"/FIRMWARE_RELEASE_STATUS="stable"/g' /etc/default/rpi-eeprom-update
sed -i 's/FIRMWARE_RELEASE_STATUS="beta"/FIRMWARE_RELEASE_STATUS="stable"/g' /etc/default/rpi-eeprom-update
sudo rpi-eeprom-update -d -f /lib/firmware/raspberrypi/bootloader/stable/${PI_EEPROM}.bin
}

### PARTITION DRIVE
partition_usb(){
partprobe ${USB}
sleep 4s
dd if=/dev/zero of=${USB} bs=512 count=1
truncate -s 2300MB ${USB}
fdisk ${USB} <<EOF
o
n
p
1
2048
524287
a
c
t
b
n
p
2
524288

p
w

EOF
partprobe ${USB}
echo 'y' | mkfs.vfat -n BOOT ${USB}1
echo 'y' | mkfs.ext4 -L ROOTFS ${USB}2
mkdir -p /mnt/p1 /mnt/p2
mount ${USB}1 /mnt/p1
mount ${USB}2 /mnt/p2
sync
umount /mnt/p2
mount -o defaults,noatime ${USB}2 /mnt/p2
bash growpart ${USB} 2 > /dev/null 2>&1
sleep 1s
resize2fs ${USB}2 > /dev/null 2>&1
sleep 1s
}

### RSYNC
transfer(){
cd /
cp -fdrP /boot/* /mnt/p1/
rsync -apvx --progress --stats --human-readable . /mnt/p2 > /dev/null 
}

transfer_to_usb(){
source /etc/opt/progressbar.txt
    enable_trapping
    setup_scroll_area
    for i in {0..100}
    do
        if [ $i = 0 ]; then
            block_progress_bar $i
        else
            transfer
            draw_progress_bar $i
        fi
    done
    destroy_scroll_area
}

### FETCH UUID
sleep 1s
partition_uuid(){
echo 'BOOT_UUID="' > boot1
blkid -o export -- "${USB}1" | sed -ne 's/^UUID=//p' > boot2
echo '"' > boot3
paste -d '\0' boot1 boot2 boot3  > /etc/opt/boot-id.txt
rm -f boot1 boot2 boot3

echo 'ROOT_UUID="' > root1
blkid -o export -- "${USB}2" | sed -ne 's/^UUID=//p' > root2
echo '"' > root3
paste -d '\0' root1 root2 root3  > /etc/opt/root-id.txt
rm -f root1 root2 root3

echo 'ROOT_PARTUUID="' > root1
blkid -o export -- "${USB}2" | sed -ne 's/^PARTUUID=//p' > root2
echo '"' > root3
paste -d '\0' root1 root2 root3  > /etc/opt/root-pid.txt
rm -f root1 root2 root3
}

### CMDLINE
create_cmdline(){
source /etc/opt/root-pid.txt
rm -f /mnt/p1/cmdline.txt
tee /mnt/p1/cmdline.txt <<EOF
console=serial0,115200 console=tty1 root=PARTUUID=${ROOT_PARTUUID} rootfstype=ext4 elevator=deadline fsck.repair=yes logo.nologo net.ifnames=0 rootwait
EOF
}

### EXTLINUX
create_extlinux(){
source /etc/opt/root-pid.txt
rm -f /mnt/p1/extlinux/extlinux.conf
tee /mnt/p1/extlinux/extlinux.conf <<EOF
label kernel
    kernel /Image
    append earlyprintk initrd=/uInitrd console=serial0,115200 console=tty1 rw root=PARTUUID=${ROOT_PARTUUID} rootfstype=ext4 fsck.repair=yes logo.nologo net.ifnames=0 rootwait
EOF
}

### FSTAB
create_fstab(){
source /etc/opt/boot-id.txt
source /etc/opt/root-id.txt
rm -f /mnt/p2/etc/fstab
tee /mnt/p2/etc/fstab <<EOF
UUID=${BOOT_UUID}	/boot		vfat    defaults 0 2
UUID=${ROOT_UUID}	/		ext4	defaults,noatime,nodiratime,commit=600,errors=remount-ro 0 1
tmpfs	/tmp		tmpfs	defaults,nosuid 0 0
EOF
}

### EXECUTION
run_as_root
check_progressbar

if [ $ERROR ]; then
    error_node;
else 
    correct
fi

echo
confirm
echo
echo -e "${RED}Updating eeprom${FIN} ..."
update_eeprom
echo -e "${RED}Done${FIN}."

echo
echo -e "${RED}Partitioning USB${FIN} ..."
partition_usb > /dev/null 2>&1
echo -e "${RED}Done${FIN}."

echo
echo -e "${YLW}Please be patient as the boot and root filesystem${FIN}"
echo -e "${YLW}are transferred over to the USB drive${FIN}."
transfer_to_usb
clear
sleep 1s

echo
echo -e "${RED}Fetching UUID${FIN} ..."
partition_uuid
sleep 1s
echo -e "${RED}Done${FIN}."

echo
echo -e "${RED}Creating new cmdline${FIN} ..."
if `grep -Fx "bcm2711" "/etc/opt/soc.txt" > /dev/null 2>&1;`
	then create_cmdline;
fi
if `grep -Fx "bcm2711" "/etc/opt/board.txt" > /dev/null 2>&1;`
	then create_extlinux;
fi
sleep 1s
echo -e "${RED}Done${FIN}."

echo
echo -e "${RED}Creating fstab${FIN} ..."
create_fstab
sleep 1s
echo -e "${RED}Done${FIN}."

echo 
echo -e "${RED}Unmounting USB${FIN} ..."
rm -fdr /etc/opt/root-pid.txt /etc/opt/root-id.txt \
/etc/opt/boot-id.txt
rm -fdr /mnt/p2/mnt/*
umount /mnt/p2/boot > /dev/null 2>&1
umount /mnt/p2 > /dev/null 2>&1
umount /mnt/p1 > /dev/null 2>&1
rm -fdr /mnt/*
echo -e "${RED}Done${FIN}."
echo
echo You may now power down and remove the sdcard.
