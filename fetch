#!/bin/bash

BINURL="https://github.com/raspberrypi/firmware/raw/master/boot/"
DOWNLOAD="aria2c -c --download-result=hide --console-log-level=error --disable-ipv6=true --summary-interval=0 --show-files=false"
RED="\e[1;31m"
GRN="\e[1;32m"
PNK="\e[1;35m"
WHT="\e[1;37m"
YLW="\e[1;33m"
SRED="\e[0;31m"
SGRN="\e[0;32m"
SYLW="\e[0;33m"
FIN="\e[0m"

os_release(){
if [[ `grep -w "buster" "/etc/os-release"` ]]; then URL="https://github.com/pyavitz/rpi-linux/releases/download/gcc-9/"; fi
if [[ `grep -w "beowulf" "/etc/os-release"` ]]; then URL="https://github.com/pyavitz/rpi-linux/releases/download/gcc-9/"; fi
if [[ `grep -w "bullseye" "/etc/os-release"` ]]; then URL="https://github.com/pyavitz/rpi-linux/releases/download/gcc-10/"; fi
if [[ `grep -w "bookworm" "/etc/os-release"` ]]; then URL="https://github.com/pyavitz/rpi-linux/releases/download/gcc-10/"; fi
if [[ `grep -w "chimaera" "/etc/os-release"` ]]; then URL="https://github.com/pyavitz/rpi-linux/releases/download/gcc-10/"; fi
if [[ `grep -w "daedalus" "/etc/os-release"` ]]; then URL="https://github.com/pyavitz/rpi-linux/releases/download/gcc-10/"; fi
if [[ `grep -w "focal" "/etc/os-release"` ]]; then URL="https://github.com/pyavitz/rpi-linux/releases/download/gcc-9/"; fi
if [[ `grep -w "hirsute" "/etc/os-release"` ]]; then URL="https://github.com/pyavitz/rpi-linux/releases/download/gcc-10/"; fi
if [[ `grep -w "impish" "/etc/os-release"` ]]; then URL="https://github.com/pyavitz/rpi-linux/releases/download/gcc-10/"; fi
if [[ `grep -w "jammy" "/etc/os-release"` ]]; then URL="https://github.com/pyavitz/rpi-linux/releases/download/gcc-10/"; fi
if [[ `grep -w "unstable" "/etc/os-release"` ]]; then URL="https://github.com/pyavitz/rpi-linux/releases/download/gcc-10/"; fi
}

echo_bdone(){
echo -e "${PNK}[${FIN}${GRN}done${FIN}${PNK}]${FIN}"
}

echo_bins(){
echo -e "${RED}Downloading binaries${FIN} ..."
}

list(){
os_release
version=$(curl --silent -L ${URL}version)
echo $version
}

update(){
sudo mv -f /usr/local/bin/fetch /usr/local/bin/fetch.orig
sudo wget -cq https://raw.githubusercontent.com/pyavitz/scripts/master/fetch -P /usr/local/bin
if [ -e /usr/local/bin/fetch ]; then sudo chmod +x /usr/local/bin/fetch; fi
if [ -e /usr/local/bin/fetch ]; then sudo rm -f /usr/local/bin/fetch.orig; else sudo mv -f /usr/local/bin/fetch.orig /usr/local/bin/fetch; fi
fetch -h
}

initrd_script(){
sudo mkdir -p /etc/initramfs/post-update.d/
sudo wget -cq https://raw.githubusercontent.com/pyavitz/rpi-img-builder/master/files/scripts/99-initrd -P /etc/initramfs/post-update.d/
sudo chmod +x /etc/initramfs/post-update.d/99-initrd
sudo chown root:root /etc/initramfs/post-update.d/99-initrd
}

initrd_check(){
if [ -e /etc/initramfs/post-update.d/99-initrd ]; then :; else initrd_script > /dev/null 2>&1; fi
}

### LINUX KERNELS

## LATEST LTS
rpi-5.10.y(){
initrd_check
os_release
mkdir -p ~/.build
cd ~/.build
echo -e "${RED}Fetching rpi-5.10.y${FIN} ..."
if [[ `wget -S --spider ${URL}rpi-5.10.y.tar.xz 2>&1 | grep 'HTTP/1.1 200 OK'` ]]; then
	${DOWNLOAD} ${URL}rpi-5.10.y.tar.xz
	echo_bdone;
else
	echo -e "${WHT}Something went wrong? Please report which Distribution and Release you are using.${FIN}"
	exit 1;
fi
echo
echo -e "${RED}Extracting archive${FIN} ..."
echo -e -n "${WHT}"
pv rpi-5.10.y.tar.xz | tar -xJ rpi-5.10.y
echo -e -n "${FIN}"
rm -f rpi-5.10.y.tar.xz
echo
echo -e "${RED}Starting install${FIN} ..."
cd rpi-5.10.y
sudo dpkg -i *.deb
cd ~
echo -e "${RED}Done${FIN}."
sudo rm -fdr ~/.build/*
}

rpi2-5.10.y(){
initrd_check
os_release
mkdir -p ~/.build
cd ~/.build
echo -e "${RED}Fetching rpi2+3-5.10.y${FIN} ..."
if [[ `wget -S --spider ${URL}rpi2-5.10.y.tar.xz 2>&1 | grep 'HTTP/1.1 200 OK'` ]]; then
	${DOWNLOAD} ${URL}rpi2-5.10.y.tar.xz
	echo_bdone;
else
	echo -e "${WHT}Something went wrong? Please report which Distribution and Release you are using.${FIN}"
	exit 1;
fi
echo
echo -e "${RED}Extracting archive${FIN} ..."
echo -e -n "${WHT}"
pv rpi2-5.10.y.tar.xz | tar -xJ rpi2-5.10.y
echo -e -n "${FIN}"
rm -f rpi2-5.10.y.tar.xz
echo
echo -e "${RED}Starting install${FIN} ..."
cd rpi2-5.10.y
sudo dpkg -i *.deb
cd ~
echo -e "${RED}Done${FIN}."
sudo rm -fdr ~/.build/*
}

rpi3-5.10.y(){
initrd_check
os_release
mkdir -p ~/.build
cd ~/.build
echo -e "${RED}Fetching rpi3-5.10.y${FIN} ..."
if [[ `wget -S --spider ${URL}rpi3-5.10.y.tar.xz 2>&1 | grep 'HTTP/1.1 200 OK'` ]]; then
	${DOWNLOAD} ${URL}rpi3-5.10.y.tar.xz
	echo_bdone;
else
	echo -e "${WHT}Something went wrong? Please report which Distribution and Release you are using.${FIN}"
	exit 1;
fi
echo
echo -e "${RED}Extracting archive${FIN} ..."
echo -e -n "${WHT}"
pv rpi3-5.10.y.tar.xz | tar -xJ rpi3-5.10.y
echo -e -n "${FIN}"
rm -f rpi3-5.10.y.tar.xz
echo
echo -e "${RED}Starting install${FIN} ..."
cd rpi3-5.10.y
sudo dpkg -i *.deb
cd ~
echo -e "${RED}Done${FIN}."
sudo rm -fdr ~/.build/*
}

rpi4-5.10.y(){
initrd_check
os_release
mkdir -p ~/.build
cd ~/.build
echo -e "${RED}Fetching rpi4-5.10.y (ARM64)${FIN} ..."
if [[ `wget -S --spider ${URL}rpi4-5.10.y.tar.xz 2>&1 | grep 'HTTP/1.1 200 OK'` ]]; then
	${DOWNLOAD} ${URL}rpi4-5.10.y.tar.xz
	echo_bdone;
else
	echo -e "${WHT}Something went wrong? Please report which Distribution and Release you are using.${FIN}"
	exit 1;
fi
echo
echo -e "${RED}Extracting archive${FIN} ..."
echo -e -n "${WHT}"
pv rpi4-5.10.y.tar.xz | tar -xJ rpi4-5.10.y
echo -e -n "${FIN}"
rm -f rpi4-5.10.y.tar.xz
echo
echo -e "${RED}Starting install${FIN} ..."
cd rpi4-5.10.y
sudo dpkg -i *.deb
cd ~
echo -e "${RED}Done${FIN}."
sudo rm -fdr ~/.build/*
}

rpi4v7-5.10.y(){
initrd_check
os_release
mkdir -p ~/.build
cd ~/.build
echo -e "${RED}Fetching rpi4-5.10.y (ARM)${FIN} ..."
if [[ `wget -S --spider ${URL}rpi4v7-5.10.y.tar.xz 2>&1 | grep 'HTTP/1.1 200 OK'` ]]; then
	${DOWNLOAD} ${URL}rpi4v7-5.10.y.tar.xz
	echo_bdone;
else
	echo -e "${WHT}Something went wrong? Please report which Distribution and Release you are using.${FIN}"
	exit 1;
fi
echo
echo -e "${RED}Extracting archive${FIN} ..."
echo -e -n "${WHT}"
pv rpi4v7-5.10.y.tar.xz | tar -xJ rpi4v7-5.10.y
echo -e -n "${FIN}"
rm -f rpi4v7-5.10.y.tar.xz
echo
echo -e "${RED}Starting install${FIN} ..."
cd rpi4v7-5.10.y
sudo dpkg -i *.deb
cd ~
echo -e "${RED}Done${FIN}."
sudo rm -fdr ~/.build/*
}

## LASTEST STABLE
rpi-stable(){
initrd_check
os_release
mkdir -p ~/.build
cd ~/.build
echo -e "${RED}Fetching rpi-stable${FIN} ..."
if [[ `wget -S --spider ${URL}rpi-stable.tar.xz 2>&1 | grep 'HTTP/1.1 200 OK'` ]]; then
	${DOWNLOAD} ${URL}rpi-stable.tar.xz
	echo_bdone;
else
	echo -e "${WHT}Something went wrong? Please report which Distribution and Release you are using.${FIN}"
	exit 1;
fi
echo
echo -e "${RED}Extracting archive${FIN} ..."
echo -e -n "${WHT}"
pv rpi-stable.tar.xz | tar -xJ rpi-stable
echo -e -n "${FIN}"
rm -f rpi-stable.tar.xz
echo
echo -e "${RED}Starting install${FIN} ..."
cd rpi-stable
sudo dpkg -i *.deb
cd ~
echo -e "${RED}Done${FIN}."
sudo rm -fdr ~/.build/*
}

rpi2-stable(){
initrd_check
os_release
mkdir -p ~/.build
cd ~/.build
echo -e "${RED}Fetching rpi2+3-stable${FIN} ..."
if [[ `wget -S --spider ${URL}rpi2-stable.tar.xz 2>&1 | grep 'HTTP/1.1 200 OK'` ]]; then
	${DOWNLOAD} ${URL}rpi2-stable.tar.xz
	echo_bdone;
else
	echo -e "${WHT}Something went wrong? Please report which Distribution and Release you are using.${FIN}"
	exit 1;
fi
echo
echo -e "${RED}Extracting archive${FIN} ..."
echo -e -n "${WHT}"
pv rpi2-stable.tar.xz | tar -xJ rpi2-stable
echo -e -n "${FIN}"
rm -f rpi2-stable.tar.xz
echo
echo -e "${RED}Starting install${FIN} ..."
cd rpi2-stable
sudo dpkg -i *.deb
cd ~
echo -e "${RED}Done${FIN}."
sudo rm -fdr ~/.build/*
}

rpi3-stable(){
initrd_check
os_release
mkdir -p ~/.build
cd ~/.build
echo -e "${RED}Fetching rpi3-stable${FIN} ..."
if [[ `wget -S --spider ${URL}rpi3-stable.tar.xz 2>&1 | grep 'HTTP/1.1 200 OK'` ]]; then
	${DOWNLOAD} ${URL}rpi3-stable.tar.xz
	echo_bdone;
else
	echo -e "${WHT}Something went wrong? Please report which Distribution and Release you are using.${FIN}"
	exit 1;
fi
echo
echo -e "${RED}Extracting archive${FIN} ..."
echo -e -n "${WHT}"
pv rpi3-stable.tar.xz | tar -xJ rpi3-stable
echo -e -n "${FIN}"
rm -f rpi3-stable.tar.xz
echo
echo -e "${RED}Starting install${FIN} ..."
cd rpi3-stable
sudo dpkg -i *.deb
cd ~
echo -e "${RED}Done${FIN}."
sudo rm -fdr ~/.build/*
}

rpi4-stable(){
initrd_check
os_release
mkdir -p ~/.build
cd ~/.build
echo -e "${RED}Fetching rpi4-stable (ARM64)${FIN} ..."
if [[ `wget -S --spider ${URL}rpi4-stable.tar.xz 2>&1 | grep 'HTTP/1.1 200 OK'` ]]; then
	${DOWNLOAD} ${URL}rpi4-stable.tar.xz
	echo_bdone;
else
	echo -e "${WHT}Something went wrong? Please report which Distribution and Release you are using.${FIN}"
	exit 1;
fi
echo
echo -e "${RED}Extracting archive${FIN} ..."
echo -e -n "${WHT}"
pv rpi4-stable.tar.xz | tar -xJ rpi4-stable
echo -e -n "${FIN}"
rm -f rpi4-stable.tar.xz
echo
echo -e "${RED}Starting install${FIN} ..."
cd rpi4-stable
sudo dpkg -i *.deb
cd ~
echo -e "${RED}Done${FIN}."
sudo rm -fdr ~/.build/*
}

rpi4v7-stable(){
initrd_check
os_release
mkdir -p ~/.build
cd ~/.build
echo -e "${RED}Fetching rpi4-stable (ARM)${FIN} ..."
if [[ `wget -S --spider ${URL}rpi4v7-stable.tar.xz 2>&1 | grep 'HTTP/1.1 200 OK'` ]]; then
	${DOWNLOAD} ${URL}rpi4v7-stable.tar.xz
	echo_bdone;
else
	echo -e "${WHT}Something went wrong? Please report which Distribution and Release you are using.${FIN}"
	exit 1;
fi
echo
echo -e "${RED}Extracting archive${FIN} ..."
echo -e -n "${WHT}"
pv rpi4v7-stable.tar.xz | tar -xJ rpi4v7-stable
echo -e -n "${FIN}"
rm -f rpi4v7-stable.tar.xz
echo
echo -e "${RED}Starting install${FIN} ..."
cd rpi4v7-stable
sudo dpkg -i *.deb
cd ~
echo -e "${RED}Done${FIN}."
sudo rm -fdr ~/.build/*
}

### BOOT BINARIES
rpi4_downbins(){
mkdir -p ~/.build
sudo rm -fdr ~/.build/*
cd ~/.build
echo_bins
${DOWNLOAD} ${BINURL}fixup4.dat
${DOWNLOAD} ${BINURL}fixup4cd.dat
${DOWNLOAD} ${BINURL}fixup4db.dat
${DOWNLOAD} ${BINURL}fixup4x.dat
${DOWNLOAD} ${BINURL}start4.elf
${DOWNLOAD} ${BINURL}start4cd.elf
${DOWNLOAD} ${BINURL}start4db.elf
${DOWNLOAD} ${BINURL}start4x.elf
echo_bdone
}

rpi_downbins(){
mkdir -p ~/.build
sudo rm -fdr ~/.build/*
cd ~/.build
echo_bins
${DOWNLOAD} ${BINURL}bootcode.bin
${DOWNLOAD} ${BINURL}fixup.dat
${DOWNLOAD} ${BINURL}fixup_cd.dat
${DOWNLOAD} ${BINURL}fixup_db.dat
${DOWNLOAD} ${BINURL}fixup_x.dat
${DOWNLOAD} ${BINURL}start.elf
${DOWNLOAD} ${BINURL}start_cd.elf
${DOWNLOAD} ${BINURL}start_db.elf
${DOWNLOAD} ${BINURL}start_x.elf
echo_bdone
}

rpi4_cleanbins(){
sudo rm -f /boot/fixup4*.dat
sudo rm -f /boot/start4*.elf
}

rpi_cleanbins(){
sudo rm -f /boot/bootcode.bin
sudo rm -f /boot/fixup*.dat
sudo rm -f /boot/start*.elf
}

rpi4_install(){
echo
echo -e "${RED}Installing boot binaries${FIN} ..."
sudo install -m 0644 ~/.build/fixup4*.dat /boot
sudo install -m 0644 ~/.build/start4*.elf /boot
cd ~
sudo rm -fdr ~/.build/*
}

rpi_install(){
echo
echo -e "${RED}Installing boot binaries${FIN} ..."
sudo install -m 0644 ~/.build/bootcode.bin /boot
sudo install -m 0644 ~/.build/fixup*.dat /boot
sudo install -m 0644 ~/.build/start*.elf /boot
cd ~
sudo rm -fdr ~/.build/*
}

rpi4_check(){
rpi4_downbins
if ls ~/.build/{fixup4.dat,fixup4cd.dat,fixup4db.dat,fixup4x.dat,start4.elf,start4cd.elf,start4db.elf,start4x.elf} > /dev/null 2>&1; then
	rpi4_cleanbins
	rpi4_install
	echo -e "${RED}Done${FIN}.";
else
	echo -e "${SRED}Install Failed${FIN}?"
	sudo rm -fdr ~/.build/*
	exit;
fi
}

rpi_check(){
rpi_downbins
if ls ~/.build/{bootcode.bin,fixup.dat,fixup_cd.dat,fixup_db.dat,fixup_x.dat,start.elf,start_cd.elf,start_db.elf,start_x.elf} > /dev/null 2>&1; then
	rpi_cleanbins
	rpi_install
	echo -e "${RED}Done${FIN}.";
else
	echo -e "${SRED}Install Failed${FIN}?"
	sudo rm -fdr ~/.build/*
	exit;
fi
}

### FIRMWARE
firmware(){
FWURL="https://github.com/pyavitz/firmware.git"
FWDEST="/lib/firmware/updates/brcm"
RBFALSE="sudo git config pull.rebase false"
echo -e "${RED}Checking firmware${FIN}" ...
sudo mkdir -p /lib/firmware/updates
if [ -e /etc/firmware ]; then
	:;
else
	sudo ln -sr /lib/firmware /etc/firmware;
fi
if [[ `command -v git` ]]; then
	:;
else
	sudo apt update
	sudo apt install -y git;
fi
if [ -e ${FWDEST}/.git ]; then
	cd ${FWDEST}
	${RBFALSE}
	sudo git pull;
else
	sudo git clone ${FWURL} ${FWDEST};
fi
echo -e "${RED}Done${FIN}".
cd ~
}

### USERLAND
rpi_userland(){
echo
echo -e "${RED}Updating userland${FIN}."
mkdir -p ~/.build
cd ~/.build
git clone https://github.com/raspberrypi/userland.git
cd userland
wget -cq https://raw.githubusercontent.com/pyavitz/rpi-img-builder/master/files/debian/patches/userland-remove-hi-pi.patch
patch -p1 < userland-remove-hi-pi.patch
rm -f userland-remove-hi-pi.patch
if grep -w "Linux/arm64" "/usr/src/linux-headers-`uname -r`/.config"`; then
	echo -e "\e[1;37m== ARM64\e[0m"
	sleep 1s
	./buildme --aarch64;
else
	if `grep -w "Linux/arm" "/usr/src/linux-headers-`uname -r`/.config"`; then
		echo -e "\e[1;37m== ARM\e[0m"
		sleep 1s
		./buildme;
	fi
fi
cd ~
sudo rm -fdr ~/.build/userland
sudo ldconfig
echo -e "${RED}Done${FIN}."
}

### CHECKS
internet_check(){
if [[ `command -v wget` ]]; then
	[[ `wget -S --spider http://github.com 2>&1 | grep 'HTTP/1.1 200 OK'` ]];
else
	if [[ `curl -I https://github.com 2>&1 | grep 'HTTP/2 200'` ]]; then
		echo -e "${WHT}Installing missing depends${FIN}."
		sudo apt update
		sudo apt upgrade -y
		sudo apt install -y wget;
	else
		echo -e "This script requires an internet connection."
		exit;
	fi
fi
}

depends_check(){
if [[ `command -v aria2c pv` ]]; then :; else sudo apt update; sudo apt upgrade -y; sudo apt install -y aria2 pv; fi
}

internet_check
depends_check
# Commands
if [ $# -eq 0 ]; then
	echo -e "\e[0;31mMissing options!${FIN}"
	echo "(run $0 -h for help)"
	echo ""
	exit 0
fi

ECHO="false"

while getopts "12bruUhf" OPTION; do
        case $OPTION in

                1)
                        ECHO="5.10"
                        ;;
                2)
                        ECHO="stable"
                        ;;
                b)
                        ECHO="binary"
                        ;;
                f)
                        ECHO="firmware"
                        ;;
                U)
                        ECHO="userland"
                        ;;
                r)
                        ECHO="rev"
                        ;;
                u)
                        ECHO="up"
                        ;;
                h)                       
                        echo -e "${RED}Fetch, Linux kernel installer for the Raspberry Pi Image Builder${FIN}"
                        echo "https://github.com/pyavitz/rpi-img-builder"
                        echo "Usage: fetch -h"
                        echo ""
                        list
                        echo ""
                        echo -e "   -1        Linux 5.10.y LTS"
                        echo -e "   -2        Linux Stable Branch"
                        echo -e "   -b        Update Boot Binaries"
                        echo -e "   -f        Update Wifi/BT Firmware"
                        echo -e "   -U        Update Raspberry Pi Userland"
                        echo ""
                        echo -e "   -u        Update Fetch"
                        echo ""
                        echo "Should you come across any bugs, either open an issue on GitHub or talk"
                        echo "with us directly by joining our channel on Libera; #arm-img-builder"
                        exit 0
                        ;;

        esac
done

if [ $ECHO = "5.10" ]; then
	echo ""
	if [[ `grep -w "bcm2708" "/etc/opt/soc.txt"` ]]; then
		rpi-5.10.y;
	fi
	
	if [[ `grep -w "bcm2709" "/etc/opt/soc.txt"` ]]; then
		rpi2-5.10.y;
	fi

	if [[ `grep -w "bcm2710" "/etc/opt/soc.txt"` ]]; then
		rpi3-5.10.y;
	fi

	if [[ `grep -w "bcm2711" "/etc/opt/soc.txt"` ]]; then
		if [[ `grep -w "arm64" "/etc/opt/soc.txt"` ]]; then
			rpi4-5.10.y;
		else
			rpi4v7-5.10.y;
		fi
	fi
fi

if [ $ECHO = "stable" ]; then
	echo ""
	if [[ `grep -w "bcm2708" "/etc/opt/soc.txt"` ]]; then
		rpi-stable;
	fi

	if [[ `grep -w "bcm2709" "/etc/opt/soc.txt"` ]]; then
		rpi2-stable;
	fi

	if [[ `grep -w "bcm2710" "/etc/opt/soc.txt"` ]]; then
		rpi3-stable;
	fi

	if [[ `grep -w "bcm2711" "/etc/opt/soc.txt"` ]]; then
		if [[ `grep -w "arm64" "/etc/opt/soc.txt"` ]]; then
			rpi4-stable;
		else
			rpi4v7-stable;
		fi
	fi
fi

if [ $ECHO = "binary" ]; then
	echo ""
	if [[ `grep -w "bcm2711" "/etc/opt/soc.txt"` ]]; then
		rpi4_check;
	fi

	if [[ `grep -w "bcm2710" "/etc/opt/soc.txt"` ]]; then
		rpi_check;
	fi
	
	if [[ `grep -w "bcm2709" "/etc/opt/soc.txt"` ]]; then
		rpi_check;
	fi

	if [[ `grep -w "bcm2708" "/etc/opt/soc.txt"` ]]; then
		rpi_check;
	fi
fi

if [ $ECHO = "rev" ]; then
	list;
fi

if [ $ECHO = "up" ]; then
	update;
fi

if [ $ECHO = "firmware" ]; then
	firmware;
fi

if [ $ECHO = "userland" ]; then
	if [ -e /usr/src/linux-headers-`uname -r`/.config ]; then
		rpi_userland;
	else
		echo
		echo -e "${RED}Something went wrong${FIN}?"
		exit;
	fi
fi
