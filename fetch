#!/bin/bash

URL="https://github.com/pyavitz/rpi-img-builder/releases/download/linux/"
BINURL="https://github.com/raspberrypi/firmware/raw/master/boot/"
DOWNLOAD="aria2c -c --download-result=hide --console-log-level=error --disable-ipv6=true --summary-interval=0 --show-files=false"
RED="\e[1;31m"
GRN="\e[1;32m"
PNK="\e[1;35m"
WHT="\e[1;37m"
YLW="\e[1;33m"
SRED="\e[0;31m"
SGRN="\e[0;32m"
SYLW="\e[0;33m"
FIN="\e[0m"

echo_bdone(){
echo -e "${PNK}[${FIN}${GRN}done${FIN}${PNK}]${FIN}"
}

echo_bins(){
echo -e "${RED}Downloading binaries${FIN} ..."
}

###
list(){
version=$(curl --silent -L ${URL}version)
echo $version
}

update(){
sudo mv -f /usr/local/bin/fetch /usr/local/bin/fetch.orig
sudo wget -cq --show-progress https://raw.githubusercontent.com/pyavitz/scripts/master/fetch -P /usr/local/bin
sudo chmod +x /usr/local/bin/fetch
if ls /usr/local/bin/fetch > /dev/null 2>&1;
   then sudo rm -f /usr/local/bin/fetch.orig ;
   else sudo mv -f /usr/local/bin/fetch.orig /usr/local/bin/fetch
fi
fetch -h
}

initrd_script(){
sudo mkdir -p /etc/initramfs/post-update.d/
sudo wget -cq https://raw.githubusercontent.com/pyavitz/rpi-img-builder/master/files/scripts/99-initrd -P /etc/initramfs/post-update.d/
sudo chmod +x /etc/initramfs/post-update.d/99-initrd
sudo chown root:root /etc/initramfs/post-update.d/99-initrd
}

initrd_check(){
if ls /etc/initramfs/post-update.d/99-initrd > /dev/null 2>&1;
   then : ;
   else initrd_script > /dev/null 2>&1;
fi
}

aria2c_check(){
if ls /usr/bin/aria2c > /dev/null 2>&1;
   then : ;
   else sudo apt install aria2 -y
fi
}

### 
rpi-5.10.y(){
aria2c_check
initrd_check
mkdir -p ~/.build
cd ~/.build
echo -e "${RED}Fetching rpi-5.10.y${FIN} ..."
${DOWNLOAD} ${URL}rpi-5.10.y.tar.xz && echo_bdone
echo
echo -e "${RED}Extracting archive${FIN} ..."
tar xf rpi-5.10.y.tar.xz
rm -f rpi-5.10.y.tar.xz
echo -e "${RED}Done${FIN}."
echo
echo -e "${RED}Starting install${FIN} ..."
cd rpi-5.10.y
sudo dpkg -i *.deb
cd ~
echo -e "${RED}Done${FIN}."
sudo rm -fdr ~/.build/*
}

rpi3-5.10.y(){
aria2c_check
initrd_check
mkdir -p ~/.build
cd ~/.build
echo -e "${RED}Fetching rpi3-5.10.y${FIN} ..."
${DOWNLOAD} ${URL}rpi3-5.10.y.tar.xz && echo_bdone
echo
echo -e "${RED}Extracting archive${FIN} ..."
tar xf rpi3-5.10.y.tar.xz
rm -f rpi3-5.10.y.tar.xz
echo -e "${RED}Done${FIN}."
echo
echo -e "${RED}Starting install${FIN} ..."
cd rpi3-5.10.y
sudo dpkg -i *.deb
cd ~
echo -e "${RED}Done${FIN}."
sudo rm -fdr ~/.build/*
}

rpi4-5.10.y(){
aria2c_check
initrd_check
mkdir -p ~/.build
cd ~/.build
echo -e "${RED}Fetching rpi4-5.10.y${FIN} ..."
${DOWNLOAD} ${URL}rpi4-5.10.y.tar.xz && echo_bdone
echo
echo -e "${RED}Extracting archive${FIN} ..."
tar xf rpi4-5.10.y.tar.xz
rm -f rpi4-5.10.y.tar.xz
echo -e "${RED}Done${FIN}."
echo
echo -e "${RED}Starting install${FIN} ..."
cd rpi4-5.10.y
sudo dpkg -i *.deb
cd ~
echo -e "${RED}Done${FIN}."
sudo rm -fdr ~/.build/*
}

###
rpi-stable(){
aria2c_check
initrd_check
mkdir -p ~/.build
cd ~/.build
echo -e "${RED}Fetching rpi-stable${FIN} ..."
${DOWNLOAD} ${URL}rpi-stable.tar.xz && echo_bdone
echo
echo -e "${RED}Extracting archive${FIN} ..."
tar xf rpi-stable.tar.xz
rm -f rpi-stable.tar.xz
echo -e "${RED}Done${FIN}."
echo
echo -e "${RED}Starting install${FIN} ..."
cd rpi-stable
sudo dpkg -i *.deb
cd ~
echo -e "${RED}Done${FIN}."
sudo rm -fdr ~/.build/*
}

rpi3-stable(){
aria2c_check
initrd_check
mkdir -p ~/.build
cd ~/.build
echo -e "${RED}Fetching rpi3-stable${FIN} ..."
${DOWNLOAD} ${URL}rpi3-stable.tar.xz && echo_bdone
echo
echo -e "${RED}Extracting archive${FIN} ..."
tar xf rpi3-stable.tar.xz
rm -f rpi3-stable.tar.xz
echo -e "${RED}Done${FIN}."
echo
echo -e "${RED}Starting install${FIN} ..."
cd rpi3-stable
sudo dpkg -i *.deb
cd ~
echo -e "${RED}Done${FIN}."
sudo rm -fdr ~/.build/*
}

rpi4-stable(){
aria2c_check
initrd_check
mkdir -p ~/.build
cd ~/.build
echo -e "${RED}Fetching rpi4-stable${FIN} ..."
${DOWNLOAD} ${URL}rpi4-stable.tar.xz && echo_bdone
echo
echo -e "${RED}Extracting archive${FIN} ..."
tar xf rpi4-stable.tar.xz
rm -f rpi4-stable.tar.xz
echo -e "${RED}Done${FIN}."
echo
echo -e "${RED}Starting install${FIN} ..."
cd rpi4-stable
sudo dpkg -i *.deb
cd ~
echo -e "${RED}Done${FIN}."
sudo rm -fdr ~/.build/*
}

###
rpi4-mainline(){
aria2c_check
initrd_check
mkdir -p ~/.build
cd ~/.build
echo -e "${RED}Fetching rpi4-mainline${FIN} ..."
${DOWNLOAD} ${URL}rpi4-mainline.tar.xz && echo_bdone
echo
echo -e "${RED}Extracting archive${FIN} ..."
tar xf rpi4-mainline.tar.xz
rm -f rpi4-mainline.tar.xz
echo -e "${RED}Done${FIN}."
echo
echo -e "${RED}Starting install${FIN} ..."
cd rpi4-mainline
sudo dpkg -i *.deb
cd ~
echo -e "${RED}Done${FIN}."
sudo rm -fdr ~/.build/*
}

###
bcm2708_setup(){
echo -e "${RED}bcm2708 found${FIN}! Adding needed file."
sudo rm -f /etc/opt/soc.txt
sudo mkdir -p /etc/opt
sudo sh -c 'echo "bcm2708" > /etc/opt/soc.txt'
echo -e "${RED}Done${FIN}. Restarting fetch."
sleep 2s
clear
fetch -u
}

bcm2710_setup(){
echo -e "${RED}bcm2710 found${FIN}! Adding needed file."
sudo rm -f /etc/opt/soc.txt
sudo mkdir -p /etc/opt
sudo sh -c 'echo "bcm2710" > /etc/opt/soc.txt'
echo -e "${RED}Done${FIN}. Restarting fetch."
sleep 2s
clear
fetch -u
}

bcm2711_setup(){
echo -e "${RED}bcm2711 found${FIN}! Adding needed file."
sudo rm -f /etc/opt/soc.txt
sudo mkdir -p /etc/opt
sudo sh -c 'echo "bcm2711" > /etc/opt/soc.txt'
echo -e "${RED}Done${FIN}. Restarting fetch."
sleep 2s
clear
fetch -u
}

rpi4_downbins(){
aria2c_check
mkdir -p ~/.build
sudo rm -fdr ~/.build/*
cd ~/.build
echo_bins
${DOWNLOAD} ${BINURL}fixup4.dat
${DOWNLOAD} ${BINURL}fixup4cd.dat
${DOWNLOAD} ${BINURL}fixup4db.dat
${DOWNLOAD} ${BINURL}fixup4x.dat
${DOWNLOAD} ${BINURL}start4.elf
${DOWNLOAD} ${BINURL}start4cd.elf
${DOWNLOAD} ${BINURL}start4db.elf
${DOWNLOAD} ${BINURL}start4x.elf
echo_bdone
}

rpi_downbins(){
aria2c_check
mkdir -p ~/.build
sudo rm -fdr ~/.build/*
cd ~/.build
echo_bins
${DOWNLOAD} ${BINURL}bootcode.bin
${DOWNLOAD} ${BINURL}fixup.dat
${DOWNLOAD} ${BINURL}fixup_cd.dat
${DOWNLOAD} ${BINURL}fixup_db.dat
${DOWNLOAD} ${BINURL}fixup_x.dat
${DOWNLOAD} ${BINURL}start.elf
${DOWNLOAD} ${BINURL}start_cd.elf
${DOWNLOAD} ${BINURL}start_db.elf
${DOWNLOAD} ${BINURL}start_x.elf
echo_bdone
}

rpi4_cleanbins(){
sudo rm -f /boot/fixup4*.dat
sudo rm -f /boot/start4*.elf
}

rpi_cleanbins(){
sudo rm -f /boot/bootcode.bin
sudo rm -f /boot/fixup*.dat
sudo rm -f /boot/start*.elf
}

rpi4_install(){
echo
echo -e "${RED}Installing boot binaries${FIN} ..."
sudo install -m 0644 ~/.build/fixup4*.dat /boot
sudo install -m 0644 ~/.build/start4*.elf /boot
cd ~
sudo rm -fdr ~/.build/*
}

rpi_install(){
echo
echo -e "${RED}Installing boot binaries${FIN} ..."
sudo install -m 0644 ~/.build/bootcode.bin /boot
sudo install -m 0644 ~/.build/fixup*.dat /boot
sudo install -m 0644 ~/.build/start*.elf /boot
cd ~
sudo rm -fdr ~/.build/*
}

rpi4_check(){
rpi4_downbins
if ls ~/.build/{fixup4.dat,fixup4cd.dat,fixup4db.dat,fixup4x.dat,start4.elf,start4cd.elf,start4db.elf,start4x.elf} > /dev/null 2>&1;
	then rpi4_cleanbins && rpi4_install && echo -e "${RED}Done${FIN}.";
	else echo -e "${SRED}Install Failed${FIN}?";
fi
}

rpi_check(){
rpi_downbins
if ls ~/.build/{bootcode.bin,fixup.dat,fixup_cd.dat,fixup_db.dat,fixup_x.dat,start.elf,start_cd.elf,start_db.elf,start_x.elf} > /dev/null 2>&1;
	then rpi_cleanbins && rpi_install && echo -e "${RED}Done${FIN}.";
	else echo -e "${SRED}Install Failed${FIN}?";
fi
}


if [ $# -eq 0 ]
then
        echo -e "\e[0;31mMissing options!${FIN}"
        echo "(run $0 -h for help)"
        echo ""
        exit 0
fi

ECHO="false"

while getopts "12brush" OPTION; do
        case $OPTION in

                1)
                        ECHO="5.10"
                        ;;
                2)
                        ECHO="stable"
                        ;;
                b)
                        ECHO="binary"
                        ;;
                r)
                        ECHO="rev"
                        ;;
                u)
                        ECHO="up"
                        ;;
                s)
                        ECHO="setup"
                        ;;

                h)                       
                        echo -e "${RED}Fetch, Linux kernel installer for the Raspberry Pi Image Builder${FIN}"
                        echo "https://github.com/pyavitz/rpi-img-builder"
                        echo "Usage: fetch -opt"
                        echo ""
                        list
                        echo ""
                        echo -e "   -1        Linux 5.10.y LTS"
                        echo -e "   -2        Linux Stable Branch"
                        echo -e "   -b        Update Boot Binaries"
                        echo ""
                        echo -e "   -u        Update Fetch"
                        echo -e "   -s        Not working? Setup Fetch"
                        echo ""
                        echo "Should you come across any bugs, either open an issue on GitHub or talk"
                        echo "with us directly by joining our channel on Freenode; #debianarm-port"
                        exit 0
                        ;;

        esac
done

if [ $ECHO = "5.10" ]
then
        echo
	if `grep -Fx "bcm2708" "/etc/opt/soc.txt" > /dev/null 2>&1;`
		then rpi-5.10.y;
        fi

	if `grep -Fx "bcm2710" "/etc/opt/soc.txt" > /dev/null 2>&1;`
		then rpi3-5.10.y;
        fi

	if `grep -Fx "bcm2711" "/etc/opt/soc.txt" > /dev/null 2>&1;`
		then rpi4-5.10.y;
        fi
fi

if [ $ECHO = "stable" ]
then
        echo
	if `grep -Fx "bcm2708" "/etc/opt/soc.txt" > /dev/null 2>&1;`
		then rpi-stable;
        fi

	if `grep -Fx "bcm2710" "/etc/opt/soc.txt" > /dev/null 2>&1;`
		then rpi3-stable;
        fi

	if `grep -Fx "bcm2711" "/etc/opt/soc.txt" > /dev/null 2>&1;`
		then rpi4-stable;
        fi
fi

if [ $ECHO = "mainline" ]
then
        echo
	if `grep -Fx "bcm2711" "/etc/opt/soc.txt" > /dev/null 2>&1;`
		then rpi4-mainline;
		else echo -e "${RED}OOPS!${FIN} Your board is not supported."
	fi
fi

if [ $ECHO = "setup" ]
then
        echo
	if ls /boot/{bcm2708-rpi-zero.dtb,bcm2708-rpi-zero-w.dtb} > /dev/null 2>&1
		then bcm2708_setup;
	fi

	if ls /boot/{bcm2710-rpi-3-b-plus.dtb,bcm2710-rpi-3-b.dtb} > /dev/null 2>&1
		then bcm2710_setup;
	fi

	if ls /boot/bcm2711-rpi-4-b.dtb > /dev/null 2>&1
		then bcm2711_setup;
	fi
fi

if [ $ECHO = "binary" ]
then
        echo
	if `grep -Fx "bcm2711" "/etc/opt/soc.txt" >/dev/null;`
		then rpi4_check;
	fi

	if `grep -Fx "bcm2710" "/etc/opt/soc.txt" >/dev/null;`
		then rpi_check;
	fi

	if `grep -Fx "bcm2708" "/etc/opt/soc.txt" >/dev/null;`
		then rpi_check;
	fi
fi

if [ $ECHO = "rev" ]
then
        list;
fi

if [ $ECHO = "up" ]
then
        update;
fi
