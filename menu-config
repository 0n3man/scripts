#!/bin/bash
# DEBIAN IMAGE BUILDER: SYSTEM MENU INTERFACE

# functions
supported_list(){
source /etc/opt/board.txt
if [[ "$BOARD" == "odroidn2" ]]; then
	BOARD_PN="Odroid N2";
	supported=1;
fi
if [[ "$BOARD" == "odroidn2plus" ]]; then
	BOARD_PN="Odroid N2+";
	supported=1;
fi
if [[ "$BOARD" == "radxazero" ]]; then
	BOARD_PN="Radxa Zero";
	supported=1;
fi
if [[ "$BOARD" == "nanopc" ]]; then
	BOARD_PN="NanoPC-T4";
	supported=1;
fi
if [[ "$BOARD" == "rockpro64" ]]; then
	BOARD_PN="RockPRO64";
	supported=1;
fi
}

HA_NOTES="The following install has been tested on the Odroid N2+ and Raspberry Pi 4B. \
I do not use audio out of my smart home controller, so I have not vailidated that \
the HA audio container works correctly. Other than that, this will give you a good \
platform for HA. If you use this install on the Raspberry Pi, I'd recommend using an \
"A1" SDCARD. On the Odroid N2+ I recommend using an eMMC. The OS is arm64, which matters \
when the final HA install script runs and you are asked to select the platform."

homeAssistant(){
clear -x
source /etc/opt/board.txt
echo ""
echo "Installing Home Assistant ..."
set -x
if [[ "$FAMILY" == "amlogic" ]]; then
	#Make sure sound is enabled on N2+
	sudo amixer sset 'FRDDR_A SINK 1 SEL' 'OUT 1'
	sudo amixer sset 'FRDDR_A SRC 1 EN' 'on'
	sudo amixer sset 'TDMOUT_B SRC SEL' 'IN 0'
	sudo amixer sset 'TOHDMITX I2S SRC' 'I2S B'
	sudo amixer sset 'TOHDMITX' 'on'
	sudo amixer sset 'FRDDR_B SINK 1 SEL' 'OUT 2'
	sudo amixer sset 'FRDDR_B SRC 1 EN' 'on'
	sudo amixer sset 'FRDDR_C SINK 1 SEL' 'OUT 3'
	sudo amixer sset 'FRDDR_C SRC 1 EN' 'on'
	sudo alsactl store
fi

# install docker
curl -fsSL https://download.docker.com/linux/debian/gpg | sudo gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg

echo \
 "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/docker-archive-keyring.gpg]\
 https://download.docker.com/linux/debian \
  $(lsb_release -cs) stable" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null

sudo apt-get update; sudo apt-get -y upgrade
sudo apt-get -y install docker-ce docker-ce-cli containerd.io

# install HA required packages
sudo apt -y install jq libglib2.0-bin udisks2
sudo apt -y install network-manager

# install agent required by ha
wget -cq --show-progress \
https://github.com/home-assistant/os-agent/releases/download/1.2.2/os-agent_1.2.2_linux_aarch64.deb
sudo dpkg -i os-agent_1.2.2_linux_aarch64.deb

# enabed service required by HA
sudo systemctl enable systemd-resolved.service
sudo systemctl start systemd-resolved.service

# need to fake grub so HA will install
sudo touch /etc/default/grub
echo '#!/bin/bash' | sudo tee /usr/bin/update-grub
echo 'echo got it'  |sudo tee -a /usr/bin/update-grub
sudo chmod 755 /usr/bin/update-grub

# enable use of GPIO pins
sudo apt install -y gpiod python3-libgpiod
echo 'KERNEL=="gpiochip0", MODE="0666"' |sudo tee -a /etc/udev/rules.d/99-perm.rules 
echo 'KERNEL=="gpiochip1", MODE="0666"' |sudo tee -a /etc/udev/rules.d/99-perm.rules 

# install tools useful for sensor scripts that communicate with HA mosquitto broker
sudo apt -y install netcat mosquitto-clients

# install tools that allow for using usb nic for backup communication path
sudo apt -y install networkd-dispatcher ifmetric

# remove avahi-daemon as it's not required
sudo apt -y remove --purge avahi-daemon

# add some kernel arguments, some that are required, some that look to make system more stable
if [ -f /boot/extlinux/extlinux.conf ]; then
	sudo sed -i '/append / s/$/ systemd.unified_cgroup_hierarchy=false systemd.legacy_systemd_cgroup_controller=false usbcore.autosuspend=-1 usbcore.autosuspend=-1 clk_ignore_unused  cgroup_enable=cpuset cgroup_memory=1 cgroup_enable=memory apparmor=1 security=apparmor/' /boot/extlinux/extlinux.conf;
fi

# grab the HA supervisor package which will install HA
wget -cq --show-progress https://github.com/home-assistant/supervised-installer/releases/latest/download/homeassistant-supervised.deb
sudo dpkg -i homeassistant-supervised.deb

# clean
sleep 2s
if [ -f os-agent_1.2.2_linux_aarch64.deb ]; then rm -f os-agent_1.2.2_linux_aarch64.deb; fi
if [ -f homeassistant-supervised.deb ]; then rm -f homeassistant-supervised.deb; fi

# finish
read -p "Press enter to continue."
}

# main menu
while [ 1 ]
do
CHOICE=$(
export NEWT_COLORS='root=,black roottext=lightgray,black title=black,lightgray'
whiptail --backtitle "Menu Interface: System Settings" --title "System Settings" --menu "" --nocancel 0 25 0 \
	"1)" "Governor" \
	"2)" "Wireless" \
	"3)" "Locales" \
	"4)" "Keyboard" \
	"5)" "Timezone" \
	"6)" "Overclock" \
	"7)" "Third-party" \
	"" "" \
	"U)" "Update" \
	"Q)" "Quit ..." 3>&2 2>&1 1>&3
)

case $CHOICE in
	"1)")
		governor -m
		;;
	"2)")
		if [[ `command -v nmtui` ]]; then
			sudo nmtui;
		else
			swh -m;
		fi
		;;
	"3)")
		sudo dpkg-reconfigure locales
		;;
	"4)")
		sudo dpkg-reconfigure keyboard-configuration
		;;
	"5)")
		sudo dpkg-reconfigure tzdata
		;;
	"6)")
		export NEWT_COLORS='root=,black roottext=lightgray,black title=black,lightgray'
		supported_list
		if [ $supported -eq 1 ]; then
			if (whiptail --backtitle "Board: $BOARD_PN" --title "$BOARD_PN" --yesno "   Overclock?" 0 0); then
				echo "overclock=1" | sudo tee /etc/opt/overclock.txt;
				sudo service tweaks restart;
			fi
		else
			whiptail --msgbox "    Your board is not supported." 0 0;
		fi
		;;
	"7)")
		while [ 1 ]
		do
		THIRDPARTY=$(
		export NEWT_COLORS='root=,black roottext=lightgray,black title=black,lightgray'
		whiptail --backtitle "Third-party: Applications" --title "Install" --menu "" --nocancel 0 0 0 \
			"HA)" "Home Assistant" \
			"E)" "Exit ..." 3>&2 2>&1 1>&3
		)
		case $THIRDPARTY in
			"HA)")
				export NEWT_COLORS='root=,black roottext=lightgray,black title=black,lightgray'
				if (whiptail --backtitle "Third-party: Home Assistant" --title "Home Assistant" --yesno "$HA_NOTES" 0 0); then
					homeAssistant
				else
					whiptail --msgbox "    Hit enter to return to menu." 0 0;
				fi
				;;
			"E)")
				clear -x
				break
				;;
			esac
		done
		;;
	"")
		;;
	"U)")
		echo ""
		echo -en "Updating menu and scripts "
		governor -u > /dev/null 2>&1
		swh -U > /dev/null 2>&1
		MENU=`command -v menu-config`
		MENUDIR="/usr/local/bin/"
		if [ -f $MENU ]; then
			sudo mv -f $MENU $MENU.orig;
		fi
		sudo wget -cq https://raw.githubusercontent.com/pyavitz/scripts/master/menu-config -P $MENUDIR
		sudo chmod +x `command -v menu-config`
		if [ -f $MENU ]; then
			sudo rm -f $MENU.orig;
		else
			sudo mv -f $MENU.orig $MENU;
		fi
		echo -e "[done]"
		sleep 1s
		clear -x
		;;
	"Q)")
		clear -x
		exit 0
		;;
	esac
done
exit 0
